package org.firstinspires.ftc.teamcode;
import org.firstinspires.ftc.teamcode.StateMachine;
import org.firstinspires.ftc.teamcode.StateMachine.State;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import org.firstinspires.ftc.robotcore.external.navigation.DistanceUnit;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import com.qualcomm.robotcore.eventloop.opmode.OpMode;
import com.qualcomm.robotcore.hardware.GyroSensor;
import com.qualcomm.robotcore.hardware.DigitalChannel;
import com.qualcomm.robotcore.hardware.DistanceSensor;
import com.qualcomm.robotcore.hardware.ColorSensor;
import com.qualcomm.robotcore.hardware.Servo;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.hardware.DcMotor;
import com.qualcomm.robotcore.hardware.DcMotorSimple;
import com.qualcomm.robotcore.util.ElapsedTime;
import com.qualcomm.hardware.bosch.BNO055IMU;
import com.qualcomm.robotcore.eventloop.opmode.TeleOp;
import com.qualcomm.hardware.bosch.JustLoggingAccelerationIntegrator;
import com.qualcomm.robotcore.eventloop.opmode.Autonomous;
import com.qualcomm.robotcore.eventloop.opmode.Disabled;
import com.qualcomm.robotcore.eventloop.opmode.LinearOpMode;
import org.firstinspires.ftc.robotcore.external.matrices.OpenGLMatrix;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaLocalizer;
import org.firstinspires.ftc.robotcore.external.ClassFactory;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackables;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackable;
import org.firstinspires.ftc.robotcore.external.navigation.RelicRecoveryVuMark;
import org.firstinspires.ftc.robotcore.external.navigation.VuforiaTrackableDefaultListener;
import org.firstinspires.ftc.robotcore.external.matrices.VectorF;
import org.firstinspires.ftc.robotcore.external.Func;
import org.firstinspires.ftc.robotcore.external.navigation.Acceleration;
import org.firstinspires.ftc.robotcore.external.navigation.AngleUnit;
import org.firstinspires.ftc.robotcore.external.navigation.AxesOrder;
import org.firstinspires.ftc.robotcore.external.navigation.AxesReference;
import org.firstinspires.ftc.robotcore.external.navigation.Orientation;
import org.firstinspires.ftc.robotcore.external.navigation.Position;
import org.firstinspires.ftc.robotcore.external.navigation.Velocity;
import java.util.Locale;

@Autonomous 

public class FacingCrater extends LinearOpMode{
       public class CalibrateGyro implements StateMachine.State {
            @Override
            public void start() {
                arm_gyro.calibrate();
                body_gyro.calibrate();
            }

            @Override
            public State update() {
                if(arm_gyro.isCalibrating() || body_gyro.isCalibrating()){
                        return this;
                } else {
                        return GetOnTheGround;
                }
            }
        }
        public class GetOnTheGround implements StateMachine.State{
            @Override
            public void start(){}
            @Override
            public State update(){
                  return DriveOut
            }
      }
      public class DriveOut implemets StateMachine.State{
            @Override
            public void start(){
                  encoderStart = back_left.getCurrentPosition();
            }
            @Override
            public State update(){
                if (back_left.getCurrentPosition() < encoderStart + 2000) {
                      back_left.setPower(0.25);
                      back_right.setPower(0.25);
                      return this;
                }
                else{
                      back_left.setPower(0);
                      back_right.setPower(0);
                      return CheckMinerals;
                }
            }
      }
      public class CheckMinerals implements StateMachine.State{
            @Override
            public void start(){}
            @Override
            public State update(){
                  return turnLeft
            }
      }
      public class turnLeft implements StateMachine.State{
            public void start() {
                  body_gyro.resetZAxisIntegrator();
                  telemetry.addData("Gyro", body_gyro.getHeading());
          }

          @Override
          public State update() {
                  // Rotate left
                  if(Math.abs(imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES).firstAngle) < 20){
                          back_left.setPower(-0.125);
                          back_right.setPower(0.125);
                          return this;
                  } else {
                          back_left.setPower(0);
                          back_right.setPower(0);
                          return DriveSomeMore;
                  }
      }
      public class DriveSomeMore implemets StateMachine.State{
            @Override
            public void start(){
                  encoderStart = back_left.getCurrentPosition();
            }
            @Override
            public State update(){
                if (back_left.getCurrentPosition() < encoderStart + 2000) {
                      back_left.setPower(0.25);
                      back_right.setPower(0.25);
                      return this;
                }
                else{
                      back_left.setPower(0);
                      back_right.setPower(0);
                      return turnRight1;
                }
            }
      }
      public class turnRight1 implements StateMachine.State{
            public void start() {
                  body_gyro.resetZAxisIntegrator();
                  telemetry.addData("Gyro", body_gyro.getHeading());
          }

          @Override
          public State update() {
                  // Rotate left
                  if(Math.abs(imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES).firstAngle) < 20){
                          back_left.setPower(0.125);
                          back_right.setPower(-0.125);
                          return this;
                  } else {
                          back_left.setPower(0);
                          back_right.setPower(0);
                          return DriveJustALittleMore;
                  }
      }
      public class DriveJustALittleMore implemets StateMachine.State{
            @Override
            public void start(){
                  encoderStart = back_left.getCurrentPosition();
            }
            @Override
            public State update(){
                if (back_left.getCurrentPosition() < encoderStart + 2000) {
                      back_left.setPower(0.25);
                      back_right.setPower(0.25);
                      return this;
                }
                else{
                      back_left.setPower(0);
                      back_right.setPower(0);
                      return turnRight2;
                }
            }
      }
      public class turnRight2 implements StateMachine.State{
            public void start() {
                  body_gyro.resetZAxisIntegrator();
                  telemetry.addData("Gyro", body_gyro.getHeading());
          }

          @Override
          public State update() {
                  // Rotate left
                  if(Math.abs(imu.getAngularOrientation(AxesReference.INTRINSIC, AxesOrder.ZYX, AngleUnit.DEGREES).firstAngle) < 20){
                          back_left.setPower(0.125);
                          back_right.setPower(-0.125);
                          return this;
                  } else {
                          back_left.setPower(0);
                          back_right.setPower(0);
                          return DriveToBase;
                  }
      }
      public class DriveToBase implemets StateMachine.State{
            @Override
            public void start(){
                  encoderStart = back_left.getCurrentPosition();
            }
            @Override
            public State update(){
                if (back_left.getCurrentPosition() < encoderStart + 2000) {
                      back_left.setPower(0.25);
                      back_right.setPower(0.25);
                      return this;
                }
                else{
                      back_left.setPower(0);
                      back_right.setPower(0);
                      return DropToken;
                }
            }
      }
      public class DropToken implements StateMachine.State{
            @Override
            public void start(){}
            @Override
            public State update(){
                  return DriveBackwardsToCrater;
            }
      }
      public class DriveBackwardsToCrater implemets StateMachine.State{
            @Override
            public void start(){
                  encoderStart = back_left.getCurrentPosition();
            }
            @Override
            public State update(){
                if (back_left.getCurrentPosition() < encoderStart + 2000) {
                      back_left.setPower(0.25);
                      back_right.setPower(0.25);
                      return this;
                }
                else{
                      back_left.setPower(0);
                      back_right.setPower(0);
                      return JESUS HOW DO WE END THIS?!?!?!;
                }
            }
      }
}

